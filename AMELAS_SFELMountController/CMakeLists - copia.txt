# **********************************************************************************************************************
#   AMELAS_SFELMountController: [...].
#
#   Copyright (C) 2023 ROA Team (Royal Institute and Observatory of the Spanish Navy)
#                      < Ángel Vera Herrera, avera@roa.es - angeldelaveracruz@gmail.com >
#                      < Jesús Relinque Madroñal >
#                      AVS AMELAS Team
#                      <>
#
#   This file is part of AMELAS_SFELMountController.
#
#   Licensed under [...]
# **********************************************************************************************************************

# **********************************************************************************************************************
# Updated 27/09/2023
# **********************************************************************************************************************

# **********************************************************************************************************************

# Cmake minimum.
cmake_minimum_required(VERSION 3.21)

# Check version.
if (NOT ${CMAKE_VERSION} VERSION_LESS "3.1.0")
    cmake_policy(SET CMP0054 NEW)
endif()

#Configure the build type.
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# Configure names and build path.
set(PROJECT "AMELAS_SFELMountController")
set(INTERFACE_SERVER "AmelasServerInterface")
set(LIB_FULL_NAME "LibAmelasInterface")
set(APP_SERVER "AmelasMountControllerServer")
set(SHOW_EXTERNALS TRUE)

# Project name.
project(${PROJECT})

# Check the architecture.
if(CMAKE_SIZEOF_VOID_P EQUAL 4)
    message(FATAL_ERROR "Architecture not supported by default.")
endif()

# Set path to additional CMake modules
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH})
include(CMakeMacros)

# Set the version.
set(MAJOR_VERSION 1)
set(MINOR_VERSION 1)
set(PATCH_VERSION 1)
set(VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})

# Output directories.
set(APP_BUILD_FOLDER ${CMAKE_BINARY_DIR}/bin/Applications)

# Other variables setting.
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_COLOR_MAKEFILE ON)
set(CMAKE_SHARED_LIBRARY_PREFIX "")
set(SHOW_EXTERNALS TRUE)
set(DEPS_SET ${PROJECT}_deps)

# External dependecies path.
set(ZMQUTILS_PATH ${CMAKE_SOURCE_DIR}/external/LibZMQUtils)

# Define the install directory for each compiler and operating system.
macro_prepare_install_dir(INSTALL_BIN INSTALL_LIB ${CMAKE_CURRENT_SOURCE_DIR}/../product)

# Configure the compilers.
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++17 -pthread -O3 -fopenmp")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(${APP_SERVER} PRIVATE /std:c++17 /openmp)
    target_compile_options(${LIB_FULL_NAME} PRIVATE /std:c++17 /openmp)
else()
    message(FATAL_ERROR "Compiler not supported by default.")
endif()

# Generic Includes.
include_directories(${CMAKE_SOURCE_DIR}/includes)
include_directories(${ZMQUTILS_PATH}/includes)

# **********************************************************************************************************************

# PRODUCT APPLICATIONS PART
# NOTES: Add more applications if neccesary.

# ----------------------------------------------------------------------------------------------------------------------
# AMELAS CONTROLLER ZMQ SERVER APP

# Set libraries. For win32 only.
if (WIN32)

    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")

        set(LIBRARIES_OPTIMIZED
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_release/LibZMQUtils.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_release/libzmq-v142-mt-4_3_4.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_release/libsodium.dll)

        set(LIBRARIES_DEBUG
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_debug/LibZMQUtils.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_debug/libzmq-v142-mt-4_3_4.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_debug/libsodium.dll)

    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")

        set(LIBRARIES_OPTIMIZED
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_release/libzmq-v142-mt-4_3_4.lib
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_release/LibZMQUtils.lib)

        set(LIBRARIES_DEBUG
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_debug/libzmq-v142-mt-4_3_4.lib
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_debug/LibZMQUtils.lib)

    else()
        message(FATAL_ERROR "Compiler not supported by default.")
    endif()

endif()

# Get the header files for the server.
file(GLOB_RECURSE HEADERS
    includes/AmelasController/*.h
    includes/AmelasControllerServer/*.h
    includes/Applications/*.h)

# Get the template files for server.
file(GLOB_RECURSE TEMPLTS
    includes/AmelasController/*.tpp
    includes/AmelasControllerServer/*.tpp
    includes/Applications/*.tpp)

# Get the source files for server part.
file(GLOB_RECURSE SOURCES
    sources/AmelasController/*.cpp
    sources/AmelasControllerServer/*.cpp
    sources/Applications/*.cpp)

# Show external libs.
if(SHOW_EXTERNALS)
    file(GLOB_RECURSE EXTERN ${ZMQUTILS_PATH}/includes/*.h)
endif()

# Create a custom group for the templates, aliases and externals.
source_group("Alias Files" FILES ${ALIAS})
source_group("Header Files" FILES ${TEMPLTS})
source_group("External Libs" FILES ${EXTERN})

# Set the application folder.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${APP_BUILD_FOLDER})

# Setup the server launcher.
macro_setup_deploy_launcher("${APP_SERVER}" "${INSTALL_BIN}" "${LIB_DEPS_SET}")

# Auxiliar interface library.
add_library(${INTERFACE_SERVER} INTERFACE)
target_sources(${INTERFACE_SERVER} INTERFACE
               sources/AmelasController/common.cpp)
target_include_directories(${INTERFACE_SERVER} INTERFACE
                           includes/AmelasController
                           includes/AmelasControllerServer)

# ----------------------------------------------------------------------------------------------------------------------

# **********************************************************************************************************************

# PRODUCT LIBRARIES PART
# NOTES: Add more interfaces if neccesary (for example for serial control).

# ----------------------------------------------------------------------------------------------------------------------
# AMELAS CONTROLLER INTERFACE LIBRARY

# Set the application folder.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Get the header files for the interface lib.
file(GLOB_RECURSE HEADERS_LIB
    includes/AmelasControllerClient/*.h)

# Get the template files for client.
file(GLOB_RECURSE TEMPLTS_LIB
    includes/AmelasControllerClient/*.tpp)

# Get the source files for client.
file(GLOB_RECURSE SOURCES_LIB
    sources/AmelasControllerClient/*.cpp)

# Show external libs.
if(SHOW_EXTERNALS)
    file(GLOB_RECURSE EXT1 ${ZMQUTILS_PATH}/includes/*.h)
endif()

# Get the include aliases files.
macro_get_files_without_extension(ALIAS_LIB includes/*)

# Create a custom group for the templates and external.
source_group("Header Files" FILES ${TEMPLTS_LIB})
source_group("Alias Files" FILES ${ALIAS_LIB})
source_group("External Libs" FILES ${EXT1})

# Add definitions and the library.
string(TOUPPER ${LIB_FULL_NAME} LIB_FULL_NAME_UPPER)
add_definitions(-D${LIB_FULL_NAME_UPPER}_LIBRARY)
add_library(${LIB_FULL_NAME} SHARED ${SOURCES_LIB} ${HEADERS_LIB} ${TEMPLTS_LIB} ${ALIAS_LIB} ${EXT1})
target_compile_definitions(${LIB_FULL_NAME} PRIVATE -D${LIB_FULL_NAME_UPPER}_LIBRARY)

# Set libraries. For win32 only.
if (WIN32)

    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")

        target_link_libraries(${LIB_FULL_NAME} optimized
            ${INTERFACE_SERVER}
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_release/LibZMQUtils.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_release/libzmq-v142-mt-4_3_4.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_release/libsodium.dll)

        target_link_libraries(${LIB_FULL_NAME} debug
            ${INTERFACE_SERVER}
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_debug/LibZMQUtils.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_debug/libzmq-v142-mt-4_3_4.dll
            ${ZMQUTILS_PATH}/lib/mingw-x86_64_debug/libsodium.dll)

    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")

        target_link_libraries(${LIB_FULL_NAME} optimized
            ${INTERFACE_SERVER}
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_release/libzmq-v142-mt-4_3_4.lib
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_release/LibZMQUtils.lib)

        target_link_libraries(${LIB_FULL_NAME} debug
            ${INTERFACE_SERVER}
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_debug/libzmq-v142-mt-4_3_4.lib
            ${ZMQUTILS_PATH}/lib/msvc-x86_64_debug/LibZMQUtils.lib)

    else()
        message(FATAL_ERROR "Compiler not supported by default.")
    endif()

endif()

# Add the includes.
target_include_directories(${LIB_FULL_NAME} PRIVATE
                           ${CMAKE_SOURCE_DIR}/includes)


# ----------------------------------------------------------------------------------------------------------------------

# **********************************************************************************************************************
